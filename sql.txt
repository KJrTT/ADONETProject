-- Создание таблицы UserDeletionLog
CREATE TABLE UserDeletionLog (
    log_id INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
    UserId INT NOT NULL,
    first_name NVARCHAR(255) NOT NULL,
    last_name NVARCHAR(255) NOT NULL,
    user_email NVARCHAR(255) NOT NULL,
    level_access_id INT NULL,
    wallet_id INT NULL,
    deletion_date DATETIME2(7) NOT NULL
);



CREATE TABLE Transactions (
    transaction_id INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
    amount DECIMAL(10,2) NOT NULL,
    type VARCHAR(10) NOT NULL,
    description NVARCHAR(255) NULL,
    created_at DATETIME2(7) NULL,
    wallet_id INT NULL
);



CREATE TABLE UserUpdateLog (
    log_id INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
    UserId INT NOT NULL,
    update_date DATETIME2(7) NOT NULL,
    password NVARCHAR(255) NOT NULL,
    user_email NVARCHAR(255) NOT NULL
);



CREATE TABLE LevelAccess (
    AccessId INT IDENTITY(1,1) PRIMARY KEY,
    Title NVARCHAR(255) UNIQUE NOT NULL
);


CREATE TABLE Wallets (
    WalletId INT IDENTITY(1,1) PRIMARY KEY,
    balance DECIMAL(10,2) NOT NULL DEFAULT 0
);


CREATE TABLE Users (
    UserId INT IDENTITY(1,1) PRIMARY KEY,
    first_name NVARCHAR(255) NOT NULL,
    last_name NVARCHAR(255) NOT NULL,
    password NVARCHAR(300) NOT NULL,
    user_email NVARCHAR(255) NOT NULL UNIQUE,
    level_access_id INT NOT NULL,
    wallet_id INT NOT NULL,
    FOREIGN KEY (level_access_id) REFERENCES LevelAccess(AccessId),
    FOREIGN KEY (wallet_id) REFERENCES Wallets(WalletId) 
);


CREATE TABLE Courses ( 
    CourseId INT IDENTITY(1,1) PRIMARY KEY,
    name_course NVARCHAR(255) NOT NULL,
    data_start DATETIME NOT NULL,
    data_end DATETIME NOT NULL,
    price DECIMAL(10,2) NULL,
    UserId INT NOT NULL, 
    FOREIGN KEY (UserId) REFERENCES Users(UserId)
);


CREATE TABLE UserCourses (
    UserCourseId INT IDENTITY(1,1) PRIMARY KEY, 
    CourseId INT NOT NULL,
    UserId INT NOT NULL,
    UNIQUE (CourseId, UserId),
    FOREIGN KEY (CourseId) REFERENCES Courses(CourseId), 
    FOREIGN KEY (UserId) REFERENCES Users(UserId)
);


INSERT INTO LevelAccess (Title) VALUES 
('Student'),
('Admin'),
('Teacher'),
('banned');

--- Триггеры

ALTER TRIGGER [dbo].[after_wallet_update]
ON [dbo].[Wallets]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
   
    IF NOT UPDATE(balance)
        RETURN;

    INSERT INTO Transactions (wallet_id, amount, type, description, created_at)
    SELECT
        i.WalletId,
        i.balance - d.balance,
        CASE
            WHEN i.balance > d.balance THEN 'deposit'
            WHEN i.balance < d.balance THEN 'withdrawal'
        END AS type,
        CASE
            WHEN i.balance > d.balance THEN 'Пополнение баланса'
            WHEN i.balance < d.balance THEN 'Оплата курса'
        END AS description,
        GETDATE()
    FROM inserted i
    INNER JOIN deleted d ON i.WalletId = d.WalletId
    WHERE i.balance <> d.balance;
END

ALTER TRIGGER [dbo].[usersupdatelog]
   ON  [dbo].[Users]
   AFTER UPDATE
AS
BEGIN
SET NOCOUNT ON;

insert into UserUpdateLog (UserId, update_date, password, user_email)
select UserId, GETDATE(), password, user_email
from deleted d
where Exists(
select 1
from inserted i
where i.UserId = d.UserId
and (i.user_email != d.user_email or i.password != d.password)
);



END


ALTER TRIGGER [dbo].[deleteuser]
   ON  [dbo].[Users]
   AFTER delete
AS
BEGIN
SET NOCOUNT ON;

    insert into UserDeletionLog (UserId, first_name, last_name, user_email, level_access_id, wallet_id, deletion_date)
select UserId, first_name, last_name, user_email, level_access_id, wallet_id, GETDATE()
from deleted d

END
